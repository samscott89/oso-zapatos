/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **issue**
   * - Table in database
   */
  export namespace issue {
    export type Table = 'issue';
    export interface Selectable {
      /**
      * **issue.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **issue.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **issue.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId: number | null;
    }
    export interface JSONSelectable {
      /**
      * **issue.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **issue.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
      /**
      * **issue.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId: number | null;
    }
    export interface Whereable {
      /**
      * **issue.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **issue.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **issue.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **issue.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **issue.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **issue.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **issue.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **issue.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **issue.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'issue_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **org**
   * - Table in database
   */
  export namespace org {
    export type Table = 'org';
    export interface Selectable {
      /**
      * **org.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **org.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **org.base_repo_role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      base_repo_role: string;
      /**
      * **org.billing_address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      billing_address: string;
    }
    export interface JSONSelectable {
      /**
      * **org.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **org.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **org.base_repo_role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      base_repo_role: string;
      /**
      * **org.billing_address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      billing_address: string;
    }
    export interface Whereable {
      /**
      * **org.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **org.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **org.base_repo_role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      base_repo_role?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **org.billing_address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      billing_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **org.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **org.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **org.base_repo_role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      base_repo_role: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **org.billing_address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      billing_address: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **org.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **org.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **org.base_repo_role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      base_repo_role?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **org.billing_address**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      billing_address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'org_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **org_role**
   * - Table in database
   */
  export namespace org_role {
    export type Table = 'org_role';
    export interface Selectable {
      /**
      * **org_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **org_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **org_role.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId: number | null;
      /**
      * **org_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
    }
    export interface JSONSelectable {
      /**
      * **org_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **org_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **org_role.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId: number | null;
      /**
      * **org_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
    }
    export interface Whereable {
      /**
      * **org_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **org_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **org_role.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **org_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **org_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **org_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **org_role.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **org_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **org_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **org_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **org_role.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **org_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'org_role_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **repo**
   * - Table in database
   */
  export namespace repo {
    export type Table = 'repo';
    export interface Selectable {
      /**
      * **repo.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **repo.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **repo.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId: number | null;
    }
    export interface JSONSelectable {
      /**
      * **repo.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **repo.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **repo.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId: number | null;
    }
    export interface Whereable {
      /**
      * **repo.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **repo.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **repo.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **repo.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **repo.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **repo.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **repo.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **repo.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **repo.orgId**
      * - `int4` in database
      * - Nullable, no default
      */
      orgId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'repo_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **repo_role**
   * - Table in database
   */
  export namespace repo_role {
    export type Table = 'repo_role';
    export interface Selectable {
      /**
      * **repo_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **repo_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **repo_role.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId: number | null;
      /**
      * **repo_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
    }
    export interface JSONSelectable {
      /**
      * **repo_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **repo_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **repo_role.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId: number | null;
      /**
      * **repo_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId: number | null;
    }
    export interface Whereable {
      /**
      * **repo_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **repo_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **repo_role.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **repo_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **repo_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **repo_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **repo_role.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **repo_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **repo_role.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **repo_role.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **repo_role.repoId**
      * - `int4` in database
      * - Nullable, no default
      */
      repoId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **repo_role.userId**
      * - `int4` in database
      * - Nullable, no default
      */
      userId?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'repo_role_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user**
   * - Table in database
   */
  export namespace user {
    export type Table = 'user';
    export interface Selectable {
      /**
      * **user.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
    }
    export interface JSONSelectable {
      /**
      * **user.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
    }
    export interface Whereable {
      /**
      * **user.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user.id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = issue.Table | org.Table | org_role.Table | repo.Table | repo_role.Table | user.Table;
  export type Selectable = issue.Selectable | org.Selectable | org_role.Selectable | repo.Selectable | repo_role.Selectable | user.Selectable;
  export type JSONSelectable = issue.JSONSelectable | org.JSONSelectable | org_role.JSONSelectable | repo.JSONSelectable | repo_role.JSONSelectable | user.JSONSelectable;
  export type Whereable = issue.Whereable | org.Whereable | org_role.Whereable | repo.Whereable | repo_role.Whereable | user.Whereable;
  export type Insertable = issue.Insertable | org.Insertable | org_role.Insertable | repo.Insertable | repo_role.Insertable | user.Insertable;
  export type Updatable = issue.Updatable | org.Updatable | org_role.Updatable | repo.Updatable | repo_role.Updatable | user.Updatable;
  export type UniqueIndex = issue.UniqueIndex | org.UniqueIndex | org_role.UniqueIndex | repo.UniqueIndex | repo_role.UniqueIndex | user.UniqueIndex;
  export type Column = issue.Column | org.Column | org_role.Column | repo.Column | repo_role.Column | user.Column;
  export type AllBaseTables = [issue.Table, org.Table, org_role.Table, repo.Table, repo_role.Table, user.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [issue.Table, org.Table, org_role.Table, repo.Table, repo_role.Table, user.Table];


  export type SelectableForTable<T extends Table> = {
    issue: issue.Selectable;
    org: org.Selectable;
    org_role: org_role.Selectable;
    repo: repo.Selectable;
    repo_role: repo_role.Selectable;
    user: user.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    issue: issue.JSONSelectable;
    org: org.JSONSelectable;
    org_role: org_role.JSONSelectable;
    repo: repo.JSONSelectable;
    repo_role: repo_role.JSONSelectable;
    user: user.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    issue: issue.Whereable;
    org: org.Whereable;
    org_role: org_role.Whereable;
    repo: repo.Whereable;
    repo_role: repo_role.Whereable;
    user: user.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    issue: issue.Insertable;
    org: org.Insertable;
    org_role: org_role.Insertable;
    repo: repo.Insertable;
    repo_role: repo_role.Insertable;
    user: user.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    issue: issue.Updatable;
    org: org.Updatable;
    org_role: org_role.Updatable;
    repo: repo.Updatable;
    repo_role: repo_role.Updatable;
    user: user.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    issue: issue.UniqueIndex;
    org: org.UniqueIndex;
    org_role: org_role.UniqueIndex;
    repo: repo.UniqueIndex;
    repo_role: repo_role.UniqueIndex;
    user: user.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    issue: issue.Column;
    org: org.Column;
    org_role: org_role.Column;
    repo: repo.Column;
    repo_role: repo_role.Column;
    user: user.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    issue: issue.SQL;
    org: org.SQL;
    org_role: org_role.SQL;
    repo: repo.SQL;
    repo_role: repo_role.SQL;
    user: user.SQL;
  }[T];

}
